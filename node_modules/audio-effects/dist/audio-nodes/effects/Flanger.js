"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var MultiAudioNode_1 = require('../MultiAudioNode');
/**
 * The audio-effects flanger class.
 * This class lets you add a flanger effect.
 */
var Flanger = (function (_super) {
    __extends(Flanger, _super);
    function Flanger(audioContext) {
        _super.call(this, audioContext);
        this.nodes = {
            inputGainNode: audioContext.createGain(),
            wetGainNode: audioContext.createGain(),
            delayNode: audioContext.createDelay(),
            gainNode: audioContext.createGain(),
            feedbackGainNode: audioContext.createGain(),
            oscillatorNode: audioContext.createOscillator() // Create the oscilator node
        };
        // Wire it all up
        this.nodes['oscillatorNode'].connect(this.nodes['gainNode']);
        this.nodes['gainNode'].connect(this.nodes['delayNode'].delayTime);
        this.nodes['inputGainNode'].connect(this.nodes['wetGainNode']);
        this.nodes['inputGainNode'].connect(this.nodes['delayNode']);
        this.nodes['delayNode'].connect(this.nodes['wetGainNode']);
        this.nodes['delayNode'].connect(this.nodes['feedbackGainNode']);
        this.nodes['feedbackGainNode'].connect(this.nodes['inputGainNode']);
        // Setup the oscillator
        this.nodes['oscillatorNode'].type = 'sine';
        this.nodes['oscillatorNode'].start(0);
        // Set the input gain-node as the input-node.
        this.node = this.nodes['inputGainNode'];
        // Set the output gain-node as the output-node.
        this.output = this.nodes['wetGainNode'];
        // Set the default delay of 0.005 seconds
        this.delay = 0.005;
        // Set the default depth to 0.002;
        this.depth = 0.002;
        // Set the default feedback to 0.5
        this.feedback = 0.5;
        // Set the default speed to 0.25Hz
        this.speed = 0.25;
    }
    Object.defineProperty(Flanger.prototype, "delay", {
        /**
         * Getter for the effect's delay
         * @return {number}
         */
        get: function () {
            return this._delay;
        },
        /**
         * Setter for the effect's delay
         * @param  {number} delay
         */
        set: function (delay) {
            // Set the internal delay value
            this._delay = parseFloat(delay);
            // Set the new value for the delay-node
            this.nodes['delayNode'].delayTime.value = this._delay;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Flanger.prototype, "depth", {
        /**
         * Getter for the effect's depth
         * @return {number}
         */
        get: function () {
            return this._depth;
        },
        /**
         * Setter for the effect's depth
         * @param  {number} depth
         */
        set: function (depth) {
            // Set the internal depth value
            this._depth = parseFloat(depth);
            // Set the gain value of the gain-node
            this.nodes['gainNode'].gain.value = this._depth;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Flanger.prototype, "feedback", {
        /**
         * Getter for the effect's feedback
         * @return {number}
         */
        get: function () {
            return this._feedback;
        },
        /**
         * Setter for the effect's feedback
         * @param  {number} feedback
         */
        set: function (feedback) {
            // Set the internal feedback value
            this._feedback = parseFloat(feedback);
            // Set the feedback gain-node value
            this.nodes['feedbackGainNode'].gain.value = this._feedback;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Flanger.prototype, "speed", {
        /**
         * Getter for the effect's speed
         * @return {number}
         */
        get: function () {
            return this._speed;
        },
        /**
         * Setter for the effect's speed
         * @param  {number} speed
         */
        set: function (speed) {
            // Set the internal speed value
            this._speed = parseFloat(speed);
            // Set the speed gain-node value
            this.nodes['oscillatorNode'].frequency.value = this._speed;
        },
        enumerable: true,
        configurable: true
    });
    return Flanger;
}(MultiAudioNode_1.MultiAudioNode));
exports.Flanger = Flanger;
;
