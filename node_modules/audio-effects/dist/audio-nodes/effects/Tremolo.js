"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var SingleAudioNode_1 = require('../SingleAudioNode');
/**
 * The audio-effects tremolo class.
 * This class lets you add a tremolo effect.
 */
var Tremolo = (function (_super) {
    __extends(Tremolo, _super);
    function Tremolo(audioContext) {
        _super.call(this, audioContext);
        this.nodes = {
            gainNode: audioContext.createGain(),
            oscillatorNode: audioContext.createOscillator() // Create the oscilator node
        };
        // Wire it all up
        this.nodes['oscillatorNode'].connect(this.nodes['gainNode'].gain);
        // Setup the oscillator
        this.nodes['oscillatorNode'].type = 'sine';
        this.nodes['oscillatorNode'].start(0);
        // Set the gain-node as the main node.
        this.node = this.nodes['gainNode'];
        // Set the default speed to 20Hz
        this.speed = 20;
    }
    Object.defineProperty(Tremolo.prototype, "speed", {
        /**
         * Getter for the effect's speed
         * @return {number}
         */
        get: function () {
            return this._speed;
        },
        /**
         * Setter for the effect's speed
         * @param  {number} speed
         */
        set: function (speed) {
            // Set the internal speed value
            this._speed = parseFloat(speed);
            // Set the new value for the oscillator frequency
            this.nodes['oscillatorNode'].frequency.value = this._speed;
        },
        enumerable: true,
        configurable: true
    });
    return Tremolo;
}(SingleAudioNode_1.SingleAudioNode));
exports.Tremolo = Tremolo;
;
