"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var MultiAudioNode_1 = require('../MultiAudioNode');
/**
 * The audio-effects delay class.
 * This class lets you add a delay effect.
 */
var Delay = (function (_super) {
    __extends(Delay, _super);
    function Delay(audioContext) {
        _super.call(this, audioContext);
        this.nodes = {
            inputGainNode: audioContext.createGain(),
            outputGainNode: audioContext.createGain(),
            wetGainNode: audioContext.createGain(),
            durationGainNode: audioContext.createGain(),
            delayNode: audioContext.createDelay() // Create the delay node
        };
        // Wire it all up
        this.nodes['inputGainNode'].connect(this.nodes['wetGainNode']);
        this.nodes['inputGainNode'].connect(this.nodes['delayNode']);
        this.nodes['durationGainNode'].connect(this.nodes['delayNode']);
        this.nodes['delayNode'].connect(this.nodes['durationGainNode']);
        this.nodes['delayNode'].connect(this.nodes['outputGainNode']);
        this.nodes['wetGainNode'].connect(this.nodes['outputGainNode']);
        // Set the input gain-node as the input-node.
        this.node = this.nodes['inputGainNode'];
        // Set the output gain-node as the output-node.
        this.output = this.nodes['outputGainNode'];
        // Set the default wetness to 1
        this.wet = 1;
        // Set the default speed to 1 second
        this.speed = 1;
        // Set the default duration to 0.4
        this.duration = 0.4;
    }
    Object.defineProperty(Delay.prototype, "wet", {
        /**
         * Getter for the effect's wetness
         * @return {number}
         */
        get: function () {
            return this._wet;
        },
        /**
         * Setter for the effect's wetness
         * @param  {number|string} wetness
         */
        set: function (wetness) {
            // Set the internal wetness value
            this._wet = parseFloat(wetness);
            // Set the new value for the wetness controll gain-node
            this.nodes['wetGainNode'].gain.value = this._wet;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Delay.prototype, "speed", {
        /**
         * Getter for the effect's speed
         * @return {number}
         */
        get: function () {
            return this._speed;
        },
        /**
         * Setter for the effect's speed
         * @param {number|string} speed
         */
        set: function (speed) {
            // Set the internal speed value
            this._speed = parseFloat(speed);
            // Set the delayTime value of the delay-node
            this.nodes['delayNode'].delayTime.value = this._speed;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Delay.prototype, "duration", {
        /**
         * Getter for the effect's duration
         * @return {number}
         */
        get: function () {
            return this._duration;
        },
        /**
         * Setter for the effect's duration
         * @param  {number|string} duration
         */
        set: function (duration) {
            // Set the internal duration value
            this._duration = parseFloat(duration);
            // Set the duration gain-node value
            this.nodes['durationGainNode'].gain.value = this._duration;
        },
        enumerable: true,
        configurable: true
    });
    return Delay;
}(MultiAudioNode_1.MultiAudioNode));
exports.Delay = Delay;
;
