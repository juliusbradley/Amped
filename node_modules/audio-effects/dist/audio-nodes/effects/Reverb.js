"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var MultiAudioNode_1 = require('../MultiAudioNode');
/**
 * The audio-effects reverb class.
 * This class lets you add a reverb effect.
 */
var Reverb = (function (_super) {
    __extends(Reverb, _super);
    function Reverb(audioContext, buffer) {
        _super.call(this, audioContext);
        this.nodes = {
            inputGainNode: audioContext.createGain(),
            outputGainNode: audioContext.createGain(),
            convolverNode: audioContext.createConvolver(),
            wetGainNode: audioContext.createGain(),
            levelGainNode: audioContext.createGain() // Create the level controll gain-node
        };
        // Wire it all up
        this.nodes['inputGainNode'].connect(this.nodes['convolverNode']);
        this.nodes['inputGainNode'].connect(this.nodes['wetGainNode']);
        this.nodes['convolverNode'].connect(this.nodes['levelGainNode']);
        this.nodes['levelGainNode'].connect(this.nodes['outputGainNode']);
        this.nodes['wetGainNode'].connect(this.nodes['outputGainNode']);
        // Set the input gain-node as the input-node.
        this.node = this.nodes['inputGainNode'];
        // Set the output gain-node as the output-node.
        this.output = this.nodes['outputGainNode'];
        // Set the default wetness to 0.5
        this.wet = 0.5;
        // Set the default level to 1
        this.level = 1;
    }
    /**
     * Get the standard input responsefile.
     * @param {string}  A path to the input response file
     * @return {Promise<AudioBuffer>}
     */
    Reverb.getInputResponseFile = function (file) {
        return fetch(file, {
            method: 'get'
        }).then(function (response) {
            return response.arrayBuffer();
        });
    };
    Object.defineProperty(Reverb.prototype, "wet", {
        /**
         * Getter for the effect's wetness
         * @return {number}
         */
        get: function () {
            return this._wet;
        },
        /**
         * Setter for the effect's wetness
         * @param  {number} wetness
         */
        set: function (wetness) {
            // Set the internal wetness value
            this._wet = parseFloat(wetness);
            // Set the new value for the wetness controll gain-node
            this.nodes['wetGainNode'].gain.value = this._wet;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Reverb.prototype, "level", {
        /**
         * Getter for the effect's level
         * @return {number}
         */
        get: function () {
            return this._level;
        },
        /**
         * Setter for the effect's level
         * @param  {number} level
         */
        set: function (level) {
            // Set the internal level value
            this._level = parseFloat(level);
            // Set the delayTime value of the delay-node
            this.nodes['levelGainNode'].gain.value = this._level;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Reverb.prototype, "buffer", {
        /**
         * Getter for the effect's convolver buffer
         * @return {Buffer}
         */
        get: function () {
            return this._buffer;
        },
        /**
         * Setter for the effect's convolver buffer
         * @param  {Stream} buffer
         */
        set: function (buffer) {
            var _this = this;
            this.audioContext.decodeAudioData(buffer, function (buffer) {
                // Set the internal buffer value
                _this._buffer = buffer;
                // Set the buffer gain-node value
                _this.nodes['convolverNode'].buffer = _this._buffer;
            });
        },
        enumerable: true,
        configurable: true
    });
    return Reverb;
}(MultiAudioNode_1.MultiAudioNode));
exports.Reverb = Reverb;
;
