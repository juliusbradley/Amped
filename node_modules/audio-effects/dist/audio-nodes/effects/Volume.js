"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var SingleAudioNode_1 = require('../SingleAudioNode');
/**
 * The audio-effects volume class.
 * This class lets you change the volume of the audio signal.
 */
var Volume = (function (_super) {
    __extends(Volume, _super);
    function Volume(audioContext) {
        _super.call(this, audioContext);
        // Create the gain-node which we'll use to change the volume.
        this.node = this.audioContext.createGain();
        // The initial volume level is 100%.
        this.level = 1;
        // The effect is not muted by default.
        this.mute = false;
    }
    Object.defineProperty(Volume.prototype, "level", {
        /**
         * Getter for the effects volume.
         * @return {Float}
         */
        get: function () {
            return this._level;
        },
        /**
         * Setter for the effects volume.
         * @param  {Float} volume The volume, tipical between 0 and 1.
         */
        set: function (volume) {
            // Parse the volume, it can not be lower than 0.
            var vol = parseFloat(volume);
            vol = (vol >= 0 ? vol : 0);
            // Set the internal volume value.
            this._level = vol;
            // Set the gainNode's gain value.
            this.node.gain.value = vol;
            // Set the internal mute value.
            this._mute = (vol === 0);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Volume.prototype, "mute", {
        /**
         * Getter for the effcts mute functionality.
         * @return {[type]} [description]
         */
        get: function () {
            return this._mute;
        },
        /**
         * Setter for the effects mute functionality.
         * @param  {Boolean} mute Whether the effect is muted.
         */
        set: function (mute) {
            // Set the internal mute value.
            this._mute = !!mute;
            if (this._mute) {
                // Keep track of the volume before muting
                this._levelBeforeMute = this.level;
                // Set the volume to 0
                this.level = 0;
            }
            else {
                // Set the volume to the previous volume.
                this.level = this._levelBeforeMute || this._level;
            }
        },
        enumerable: true,
        configurable: true
    });
    return Volume;
}(SingleAudioNode_1.SingleAudioNode));
exports.Volume = Volume;
;
