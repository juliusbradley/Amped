"use strict";
/**
 * The basic audio node class.
 * This is de skeleton for a audio  effect.
 * When the effect only contains 1 audioNode this class can be used.
 */
var SingleAudioNode = (function () {
    function SingleAudioNode(audioContext) {
        this.nodes = {};
        // Set the audio-context.
        this._audioContext = audioContext;
    }
    Object.defineProperty(SingleAudioNode.prototype, "audioContext", {
        /**
         * The effects AudioContext getter.
         * @return {AudioContext} The AudioContext used by the effect.
         */
        get: function () {
            return this._audioContext;
        },
        /**
         * The effects AudioContext setter.
         * @param  {AudioContext} audioContext
         */
        set: function (audioContext) {
            this._audioContext = audioContext;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SingleAudioNode.prototype, "node", {
        /**
         * The effect's audio-node getter.
         * @return {AudioNode} The audio-node used for the effect.
         */
        get: function () {
            return this._node;
        },
        /**
         * The effect's audio-node setter.
         * @param  {AudioNode} node
         * @return {AudioNode}
         */
        set: function (node) {
            this._node = node;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Connect the effect to other effects or native audio-nodes.
     * @param  {AudioNode|SingleAudioNode} node
     * @return {AudioNode|SingleAudioNode}
     */
    SingleAudioNode.prototype.connect = function (node) {
        // Check if the node is a Audio-effects AudioNode,
        //  otherwise assume it's a native one.
        if (node.node) {
            this.node.connect(node.node);
        }
        else {
            this.node.connect(node);
        }
        return node;
    };
    /**
     * disconnect the effect.
     * @return {AudioNode}
     */
    SingleAudioNode.prototype.disconnect = function () {
        this.node.disconnect();
        return this.node;
    };
    /**
     * Alias for the disconnect method, to offer the same api as a MultiAudioNode.
     * @return {AudioNode}
     */
    SingleAudioNode.prototype.destroy = function () {
        return this.disconnect();
    };
    return SingleAudioNode;
}());
exports.SingleAudioNode = SingleAudioNode;
;
